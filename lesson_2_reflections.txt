What happens when you initialize a repository? Why do you need to do it?
a .git file is created in the current dir that acts as your repo
This gives access to the git commands and allows you to include
files in your repo as tracked files

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area lets you indicate those files you want to include
in the next commit, as well as viewing those files in the dir that
will not be part of the commit. This gives you control more control over your repo.

How can you use the staging area to make sure you have one commit per logical change?
Once things are added to the staging area, you can then compare them to the working
files and the most recent commit to check that you are recording the changes
that you want.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A branch would be useful if you wanted to try something experimental, create a
different version of the same program (e.g., in a different language), or
otherwise do something that you would not want to have override the previous 
master branch commits. Branches allow you to have different versions of your
project existing simultaneously, with their own commit histories.

How do the diagrams help you visualize the branch structure?
The diagrams help you see how different commits are related, which
commits are reachable from a particular branch, and which commits are unreacheable
(if any).

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging to branches means the changes in each version are combined (usually keeping
 new additions and removing things that were deleted in only one branch). This 
 new commit has only one label, usually the other label is deleted. The merge 
 is represented in the diagram as two branches becoming one branch, which shows 
 which historical commits are reacheable and the progression of the
 two branches before they were merged.

 What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
 The automatic merging is less work, although you will still need to resolve
 conflicts that Git can't figure out, which could be a pain at times.
 On the other hand, the points of conflict are clearly delineated and therefore
 easier to address than if you had to find and edit them completely manually.